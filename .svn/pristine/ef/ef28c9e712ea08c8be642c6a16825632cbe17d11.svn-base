package translate.implementation;

import static ir.tree.IR.CMOVE;
import static ir.tree.IR.ESEQ;
import static ir.tree.IR.FALSE;
import static ir.tree.IR.MOVE;
import static ir.tree.IR.SEQ;
import static ir.tree.IR.TEMP;
import static ir.tree.IR.TRUE;
import static ir.tree.IR.JUMP;
import static ir.tree.IR.LABEL;
import static translate.Translator.L_MAIN;

import ast.AST;
import ast.And;
import ast.ArrayAssign;
import ast.ArrayLength;
import ast.ArrayLookup;
import ast.Assign;
import ast.Block;
import ast.BooleanLiteral;
import ast.BooleanType;
import ast.Call;
import ast.ClassDecl;
import ast.Expression;
import ast.IdentifierExp;
import ast.If;
import ast.IntArrayType;
import ast.IntegerLiteral;
import ast.IntegerType;
import ast.LessThan;
import ast.MainClass;
import ast.MethodDecl;
import ast.Minus;
import ast.NewArray;
import ast.NewObject;
import ast.NodeList;
import ast.Not;
import ast.ObjectType;
import ast.Plus;
import ast.Print;
import ast.Program;
import ast.This;
import ast.Times;
import ast.Type;
import ast.UnknownType;
import ast.VarDecl;
import ast.While;

import ir.frame.Access;
import ir.frame.Frame;
import ir.temp.Label;
import ir.temp.Temp;
import ir.tree.IR;
import ir.tree.IRExp;
import ir.tree.IRStm;
import ir.tree.TEMP;
import ir.tree.BINOP.Op;
import ir.tree.CJUMP.RelOp;

import translate.Fragments;
import translate.ProcFragment;
import translate.Translator;
import typechecker.implementation.MethodType;
import util.FunTable;
import util.ImpTable;
import util.IndentingWriter;
import util.List;
import util.Lookup;
import visitor.Visitor;


/**
 * This visitor builds up a collection of IRTree code fragments for the body
 * of methods in a minijava program.
 * <p>
 * Methods that visit statements and expression return a TRExp, other methods 
 * just return null, but they may add Fragments to the collection by means
 * of a side effect.
 * 
 * @author kdvolder
 */
public class TranslateVisitor implements Visitor<TRExp> {

	/**
	 * We build up a list of Fragment (pieces of stuff to be converted into
	 * assembly) here.
	 */
	private Fragments frags;

	/**
	 * We use this factory to create Frame's, without making our code dependent
	 * on the target architecture.
	 */
	private Frame frameFactory;
	private Frame frame;
	private ImpTable<Access> currentEnv;
	private ImpTable<FunTable<Integer>> offsetTable;
	private ImpTable<Type> symbolTable;
	private FunTable<Integer> currentClassOffsetTables;
	private ObjectType currentClass;
	private MethodType currentMethod;

	public TranslateVisitor(Lookup<Type> table, Frame frameFactory) {
		this.frags = new Fragments(frameFactory);
		this.frameFactory = frameFactory;
		this.symbolTable = (ImpTable<Type>) table;
	}

	/////// Helpers //////////////////////////////////////////////

	/**
	 * Create a frame with a given number of formals.
	 */
	private Frame newFrame(Label name, int formals) {
		return frameFactory.newFrame(name, formals);
	}

	private void putEnv(String name, Access access) {
		currentEnv.set(name, access);
	}
	
	/**
	 * After the visitor successfully traversed the program, 
	 * retrieve the built-up list of Fragments with this method.
	 */
	public Fragments getResult() {
		return frags;
	}
	
	/**
	 * Generates a table of offsets for the fields of aClass
	 * 
	 * @param aClass - class for which field offsets will be generated
	 * @param classes - list of all class declarations in the program
	 * @param currentOffset - offset after which all fields in the current class begin
	 * @return a table of variable names mapped to their offsets for aClass
	 */

	private FunTable<Integer> genFieldOffsets(ClassDecl aClass, NodeList<ClassDecl> classes, int currentOffset) {
		FunTable<Integer> offsetTable = FunTable.theEmpty();
		int offset = currentOffset;
		
		if(aClass.superName == null) {
			for(int i = 0; i < aClass.vars.size(); i++) {
				String varName = aClass.vars.elementAt(i).name;
				offsetTable = offsetTable.insert(varName, offset);
				offset = offset + 8;
			}
			
			return offsetTable;
		} else {
			ClassDecl superclass = null;
			FunTable<Integer> superClassOffsets;
			
			// Find the superclass declaration, guaranteed to be found 
			// since program has been typechecked
			for(int i = 0; i < classes.size(); i++) {
				if(classes.elementAt(i).name.equals(aClass.superName)) {
					superclass = classes.elementAt(i);
					break;
				}
			}
			
			// Get offsets of the superclass
			superClassOffsets = genFieldOffsets(superclass, classes, offset);
			
			// Update the state of the current method to account for the superclass fields
			offsetTable = offsetTable.merge(superClassOffsets);
			offset = offset + (8 * superClassOffsets.size());
			
			// Add the variable offsets of the current class
			for(int i = 0; i < aClass.vars.size(); i++) {
				String varName = aClass.vars.elementAt(i).name;
				offsetTable = offsetTable.insert(varName, offset);
				offset = offset + 8;
			}
			
			return offsetTable;
		}
	}
	
	/**
	 * Wrapper for genFieldOffsets which handles the initial argument to currentOffset
	 */
	
	private FunTable<Integer> getFieldOffsets(ClassDecl aClass, NodeList<ClassDecl> classes) {
		return genFieldOffsets(aClass, classes, 0);
	}
	
	/**
	 * Generates a table containing the class names mapped to the offset data of their respective fields
	 * 
	 * @param classes - the class declarations of the program
	 */
	private void buildOffsetTable(NodeList<ClassDecl> classes) {
		ImpTable<FunTable<Integer>> classOffsetTables = new ImpTable<FunTable<Integer>>();
		
		for (int i = 0; i < classes.size(); i++) {
			ClassDecl currentClass = classes.elementAt(i);
			FunTable<Integer> classOffsets = getFieldOffsets(currentClass, classes);
			classOffsetTables.set(currentClass.name, classOffsets);	
		}
		
		this.offsetTable = classOffsetTables;
	}
	
	/**
	 * Generates a string representation of the type of the receiver. Used to generate method
	 * call labels. 
	 * 
	 * @param receiver - the receiver of the call
	 */
	private String getReceiverType(Expression receiver) {
		if(receiver instanceof Call) {
			Call callReceiver = (Call) receiver;
			
			String receiverType = getReceiverType(callReceiver.receiver);
			String callReturnType = ((ObjectType) symbolTable.lookup(receiverType)).classInfo.getMethod(callReceiver.name).returnType.toString();
			return callReturnType;
		}
		if(receiver instanceof IdentifierExp) {
			String idReceiver = ((IdentifierExp) receiver).name;
			
			// look in the current method locals
			if(currentMethod.locals.lookup(idReceiver) != null) {
				return currentMethod.locals.lookup(idReceiver).toString();
			}
			// look in the current method formals
			for(int i = 0; i < currentMethod.formals.size(); i++) {
				if(idReceiver.equals(currentMethod.formals.get(i).id)) {
					return currentMethod.formals.get(i).type.toString();
				}
			}
			// look in the current class
			if(currentClass.classInfo.fields.lookup(idReceiver) != null) {
				return currentClass.classInfo.fields.lookup(idReceiver).toString();
			}
		}
		if(receiver instanceof NewObject) {
			return ((NewObject) receiver).typeName;
		} 
		if(receiver instanceof This) {
			return currentClass.name;
		} else {
			return null;
		}
	}
	

	////// Visitor ///////////////////////////////////////////////
	
	@Override
	public <T extends AST> TRExp visit(NodeList<T> ns) {
		IRStm result = IR.NOP;
		for (int i = 0; i < ns.size(); i++) {
			AST nextStm = ns.elementAt(i);
			result = IR.SEQ(result, nextStm.accept(this).unNx());
		}
		return new Nx(result);
	}

	@Override
	public TRExp visit(Program n) {
		buildOffsetTable(n.classes);
		n.mainClass.accept(this);
		n.classes.accept(this);
		
		return null;
	}
	
	// ************ DECLARATIONS **************************************

	@Override
	public TRExp visit(MainClass n) {
		frame = newFrame(L_MAIN, 0);
		currentEnv = new ImpTable<Access>();
		TRExp statement = n.statement.accept(this);
		IRStm body = statement.unNx();
		frags.add(new ProcFragment(frame, frame.procEntryExit1(body)));
		
		return null;
	}

	@Override
	public TRExp visit(ClassDecl n) {
		currentClass = (ObjectType) symbolTable.lookup(n.name);
		currentClassOffsetTables = offsetTable.lookup(n.name);
		
		n.methods.accept(this);
		
		currentClass = null;
		currentClassOffsetTables = null;
		
		return new Nx(IR.NOP);
	}

	@Override
	public TRExp visit(MethodDecl n) {
		// Entering a new method, setup environment
		currentEnv = new ImpTable<Access>();
		currentMethod = currentClass.classInfo.getMethod(n.name);

		// Generating function frame
		Label functionName = Label.get("_" + currentClass.name + "_" + n.name);
		int nformals = n.formals.size() + 1;
		frame = newFrame(functionName, nformals);

		// Associate parameters with formal temps in the frame
		putEnv("this", frame.getFormal(0));
		for(int i = 0; i < nformals - 1; i++) {
			putEnv(n.formals.elementAt(i).name, frame.getFormal(i + 1));
		}

		// Add locals to the frame
		for(int i = 0; i < n.vars.size(); i++) {
			Access var = frame.allocLocal(false);
			putEnv(n.vars.elementAt(i).name, var);
		}

		// Generate IR for the function body and return Expression
		TRExp statements = n.statements.accept(this);
		TRExp returnExp = n.returnExp.accept(this);
		
		IRStm body = IR.SEQ(
				statements.unNx(),
				(IR.MOVE(frame.RV(), returnExp.unEx())));
		
		frags.add(new ProcFragment(frame, frame.procEntryExit1(body)));
		
		// Restore environment
		frame = null;
		currentEnv = null;
		currentMethod = null;

		return new Nx(IR.NOP);
	}

	@Override
	public TRExp visit(VarDecl n) {
		throw new Error("Not implemented");
	}
	
	// ************ STATEMENTS ****************************************

	@Override
	public TRExp visit(Block n) {
		return n.statements.accept(this);
	}

	@Override
	public TRExp visit(If n) {
		TRExp test = n.test.accept(this);
		TRExp thn = n.then.accept(this);
		TRExp els = n.els.accept(this);
		
		Label then = Label.gen();
		Label elsewise = Label.gen();
		Label end = Label.gen();
		
		return new Nx(SEQ(SEQ(test.unCx(then, elsewise),
							  SEQ(
								  SEQ(
									  SEQ(LABEL(then),
										  thn.unNx()),
									  JUMP(end)),
								  SEQ(
									  SEQ(LABEL(elsewise),
										  els.unNx()),
									  JUMP(end)))),
						  LABEL(end)));
	}

	@Override
	public TRExp visit(While n) {
		TRExp test = n.test.accept(this);
		TRExp body = n.body.accept(this);
		
		Label loopTest = Label.gen();
		Label loopBody = Label.gen();
		Label done = Label.gen();
		
		return new Nx(SEQ(SEQ(LABEL(loopTest),
					    	  SEQ(test.unCx(loopBody, done),
					    		  SEQ(LABEL(loopBody),
					    			  SEQ(body.unNx(),
					    				  JUMP(loopTest))))),
					      LABEL(done)));
	}

	@Override
	public TRExp visit(Print n) {
		TRExp arg = n.exp.accept(this);
		return new Ex(IR.CALL(Translator.L_PRINT, arg.unEx()));
	}
	

	@Override
	public TRExp visit(Assign n) {
		TRExp address = (new IdentifierExp(n.name)).accept(this);
		TRExp val = n.value.accept(this);
		return new Nx(IR.MOVE(address.unEx(), val.unEx()));
	}

	@Override
	public TRExp visit(ArrayAssign n) {
		TRExp index = n.index.accept(this);
		IRExp offset = IR.BINOP(Op.MUL, index.unEx(), IR.CONST(frame.wordSize()));
		TRExp arrayAddress = (new IdentifierExp(n.name)).accept(this);
		IRExp assignAddress = IR.MEM(IR.BINOP(Op.PLUS, arrayAddress.unEx(), offset));
		TRExp val = n.value.accept(this);
		
		return new Nx(IR.MOVE(assignAddress, val.unEx()));
	}
	
	// ************ EXPRESSIONS ***************************************

    @Override
    public TRExp visit(And n) {
//    	TRExp e1 = n.e1.accept(this);
//    	TRExp e2 = n.e2.accept(this);
//    	
//    	Label e1True = Label.gen();
//    	Label e2True = Label.gen();
//    	Label done = Label.gen();
//    	
//    	TEMP result = TEMP(new Temp());
//    	
//    	return new Ex(ESEQ(SEQ(SEQ(SEQ(MOVE(result, IR.FALSE),
//    								   IR.CJUMP(RelOp.EQ, e1.unEx(), IR.CONST(1), e1True, done)),
//    							   SEQ(SEQ(LABEL(e1True),
//    									   IR.CJUMP(RelOp.EQ, e2.unEx(), IR.CONST(1), e2True, done)),
//    								   SEQ(LABEL(e2True),
//    									   MOVE(result, IR.TRUE)))),
//    						   LABEL(done)),
//    					   result));
    	
        //TODO: Hossein
        IRExp exp = null;
        Label e1isT = Label.gen();
        Label e2isT = Label.gen();
        Label done = Label.gen();
        Temp temp = new Temp();
        exp = ESEQ( 
                SEQ(    
                  SEQ(
                    SEQ(
                      SEQ(
                        SEQ(MOVE(TEMP(temp),IR.CONST(0)),
                            IR.CJUMP(RelOp.EQ,n.e1.accept(this).unEx(),IR.CONST(1),e1isT,done)
                           ),
                        SEQ( 
                          IR.LABEL(e1isT),
                          IR.CJUMP(RelOp.EQ, n.e1.accept(this).unEx(), IR.CONST(1), e2isT, done)
                           )
                         ), 
                         SEQ(IR.LABEL(e2isT),IR.MOVE(TEMP(temp),IR.CONST(1)))
                       ),
                       JUMP(done)
                     ),
                     LABEL(done)
                    ),
                    TEMP(temp)
                  );

        return new Ex(exp);
    }


	@Override
	public TRExp visit(LessThan n) {
		TRExp l = n.e1.accept(this);
		TRExp r = n.e2.accept(this);

		TEMP v = TEMP(new Temp());
		return new Ex(ESEQ( SEQ( 
				MOVE(v, FALSE),
				CMOVE(RelOp.LT, l.unEx(), r.unEx(), v, TRUE)),
				v));
	}
    
	@Override
	public TRExp visit(ArrayLength n) {
        TRExp array = n.array.accept(this);
        // Array size stored at index -1
        return new Ex(IR.MEM(IR.BINOP(Op.MINUS, array.unEx(), IR.CONST(frame.wordSize()))));
	}

	@Override
	public TRExp visit(Call n) {
		// Generating method label
		String receiverType = getReceiverType(n.receiver);
		Label methodName = Label.get("_" + receiverType + "_" + n.name);
		
		// Assembling method arguments
		TRExp ths = n.receiver.accept(this);
		List<IRExp> arguments = List.empty(); 
		arguments.add(ths.unEx());
		for(int i = 0; i < n.rands.size(); i++) {
			arguments.add(n.rands.elementAt(i).accept(this).unEx());
		}
		
		return new Ex(IR.CALL(methodName, arguments));

	}

	@Override
	public TRExp visit(IntegerLiteral n) {
		return new Ex(IR.CONST(n.value));
	}

	@Override
	public TRExp visit(BooleanLiteral n) {
		if(n.value)
			return new Ex(IR.CONST(1));
		else
			return new Ex(IR.CONST(0));
	}

    @Override
    public TRExp visit(IdentifierExp n) {
    	if(currentEnv.lookup(n.name) != null) {
    		Access var = currentEnv.lookup(n.name);
            return new Ex(var.exp(frame.FP()));
    	} else {
    		Access ths = frame.getFormal(0);
    		int offset = currentClassOffsetTables.lookup(n.name);
    		return new Ex(IR.MEM(IR.BINOP(Op.PLUS, ths.exp(frame.FP()), IR.CONST(offset))));
    	}
        
    }

	@Override
	public TRExp visit(This n) {
		Access ths = frame.getFormal(0);
		return new Ex(ths.exp(frame.FP()));
	}

	@Override
	public TRExp visit(NewArray n) {
		TRExp size = n.size.accept(this);
		return new Ex(IR.CALL(Translator.L_NEW_ARRAY, size.unEx()));
	}

	@Override
	public TRExp visit(NewObject n) {
		FunTable<Integer> objectOffsetTable = offsetTable.lookup(n.typeName);
		int objectSize = objectOffsetTable.size() * frame.wordSize();
		return new Ex(IR.CALL(Translator.L_NEW_OBJECT, IR.CONST(objectSize)));
	}
	
    @Override
    public TRExp visit(ArrayLookup n) {
        TRExp index = n.index.accept(this);
        TRExp array = n.array.accept(this);
        return new Ex(IR.MEM(IR.BINOP(Op.PLUS, array.unEx(), IR.BINOP(Op.MUL, index.unEx(), IR.CONST(frame.wordSize())))));       
    }

	@Override
	public TRExp visit(Not not) {
		final TRExp negated = not.e.accept(this);
		return new Ex(IR.BINOP(Op.MINUS, IR.CONST(1), negated.unEx()));
	}
	
	// ************ ARITHMETIC OPERATIONS *****************************
	
	private TRExp numericOp(Op op, Expression e1, Expression e2) {
		TRExp l = e1.accept(this);
		TRExp r = e2.accept(this);
		return new Ex(IR.BINOP(op, l.unEx(), r.unEx()));
	}

	@Override
	public TRExp visit(Plus n) {
		return numericOp(Op.PLUS,n.e1,n.e2);
	}

	@Override
	public TRExp visit(Minus n) {
		return numericOp(Op.MINUS,n.e1,n.e2);
	}

	@Override
	public TRExp visit(Times n) {
		return numericOp(Op.MUL,n.e1,n.e2);
	}
	
	// ************ TYPES *********************************************
	
	@Override
	public TRExp visit(BooleanType n) {
		throw new Error("Not implemented");
	}

	@Override
	public TRExp visit(IntegerType n) {
		throw new Error("Not implemented");
	}

	@Override
	public TRExp visit(IntArrayType n) {
		throw new Error("Not implemented");
	}

	@Override
	public TRExp visit(ObjectType n) {
		throw new Error("Not implemented");
	}

	@Override
	public TRExp visit(MethodType n) {
		throw new Error("Not implemented");
	}

	@Override
	public TRExp visit(UnknownType n) {
		throw new Error("Not implemented");
	}
	
}
