package visitor;

import java.io.PrintWriter;

import ast.AST;
import ast.And;
import ast.ArrayAssign;
import ast.ArrayLength;
import ast.ArrayLookup;
import ast.Assign;
import ast.Block;
import ast.BooleanLiteral;
import ast.BooleanType;
import ast.Call;
import ast.ClassDecl;
import ast.IdentifierExp;
import ast.If;
import ast.IntArrayType;
import ast.IntegerLiteral;
import ast.IntegerType;
import ast.LessThan;
import ast.MainClass;
import ast.MethodDecl;
import ast.Minus;
import ast.NewArray;
import ast.NewObject;
import ast.NodeList;
import ast.Not;
import ast.ObjectType;
import ast.Plus;
import ast.Print;
import ast.Program;
import ast.This;
import ast.Times;
import ast.VarDecl;
import ast.While;

import typechecker.implementation.MethodType;
import util.IndentingWriter;



/**
 * This prints the structure of an AST, showing its hierarchical relationships.
 * <p>
 * This version is also cleaned up to actually produce *properly* indented
 * output.
 * 
 * @author norm
 */
public class StructurePrintVisitor implements Visitor<Void> {

	/**
	 * Where to send out.print output.
	 */
	private IndentingWriter out;

	public StructurePrintVisitor(PrintWriter out) {
		this.out = new IndentingWriter(out);
	}

	///////////// Visitor methods /////////////////////////////////////////
	
	@Override
	public <T extends AST> Void visit(NodeList<T> nodes) {
		for (int i = 0; i < nodes.size(); i++) {
			nodes.elementAt(i).accept(this);
		}
		return null;
	}

	@Override
	public Void visit(Program n) {
		out.println("Program");
		out.indent();
		n.mainClass.accept(this);
		n.classes.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(BooleanType n) {
		out.println("BooleanType");
		return null;
	}

	@Override
	public Void visit(IntegerType n) {
		out.println("IntegerType");
		return null;
	}

	@Override
	public Void visit(Print n) {
		out.println("System.out.println");
		out.indent();
		n.exp.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(Assign n) {
		out.println("Assign");
		out.indent();
		out.println(n.name);
		n.value.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(LessThan n) {
		out.println("LessThan");
		out.indent();
		n.e1.accept(this);
		n.e2.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(Plus n) {
		out.println("Plus");
		out.indent();
		n.e1.accept(this);
		n.e2.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(Minus n) {
		out.println("Minus");
		out.indent();
		n.e1.accept(this);
		n.e2.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(Times n) {
		out.println("Times");
		out.indent();
		n.e1.accept(this);
		n.e2.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(IntegerLiteral n) {
		out.println("IntegerLiteral "+ n.value);
		return null;
	}

	@Override
	public Void visit(IdentifierExp n) {
		out.println("IdentifierExp " + n.name);
		return null;
	}

	@Override
	public Void visit(Not n) {
		out.println("Not");
		out.indent();
		n.e.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(MainClass n) {
		out.println("MainClass");
		out.indent();
		out.println("Class Name: " + n.className);
		out.indent();
		out.println("public static void main( String[] " + n.argName + " ) {");
		n.statement.accept(this);
		out.println("}");
		out.outdent();
		out.println("}");
		out.println();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(ClassDecl n) {
		out.println("ClassDeclaration");
		out.indent();
		if(n.superName != null)
			out.println("class " + n.name + " extends " + n.superName + " {");
		else
			out.println("class " + n.name + " {");
		out.indent();
		n.vars.accept(this);
		n.methods.accept(this);
		out.println("}");
		out.println();
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(MethodDecl n) {
		out.println("MethodDeclaration");
		out.indent();
		out.print("Return type: ");
		n.returnType.accept(this);
		out.println("Method name: " + n.name);
		out.println("Formals");
		out.indent();
		n.formals.accept(this);
		out.outdent();
		out.println("Locals");
		out.indent();
		n.vars.accept(this);
		out.outdent();
		out.println("Body");
		out.indent();
		n.statements.accept(this);
		out.outdent();
		out.println("Return Expression");
		out.indent();
		n.returnExp.accept(this);
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(VarDecl n) {
		out.println("VariableDeclaration");
		out.indent();
		out.println("Kind: " + n.kindToString());
		out.println("Type");
		out.indent();
		n.type.accept(this);
		out.outdent();
		out.println("Name");
		out.indent();
		out.println(n.name);
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(IntArrayType n) {
		out.println("IntArrayType");
		return null;
	}

	@Override
	public Void visit(ObjectType n) {
		out.println("ObjectType: " + n.name);
		return null;
	}

	@Override
	public Void visit(Block n) {
		out.println("Block");
		out.indent();
		n.statements.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(If n) {
		out.println("If");
		out.indent();
		n.test.accept(this);
		out.println("Then");
		out.indent();
		n.then.accept(this);
		out.outdent();
		out.println("Else");
		out.indent();
		n.els.accept(this);
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(While n) {
		out.println("While");
		out.indent();
		n.test.accept(this);
		out.println("Do");
		out.indent();
		n.body.accept(this);
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(ArrayAssign n) {
		out.println("ArrayAssign");
		out.indent();
		out.println("Array Name");
		out.indent();
		out.println(n.name);
		out.outdent();
		out.println("Array Index");
		out.indent();
		n.index.accept(this);
		out.outdent();
		out.println("Value");
		out.indent();
		n.value.accept(this);
		out.outdent();
		out.outdent();		
		return null;
	}

	@Override
	public Void visit(And n) {
		out.println("And");
		out.indent();
		n.e1.accept(this);
		n.e2.accept(this);
		out.outdent();
		return null;
	}

	@Override
	public Void visit(ArrayLookup n) {
		out.println("ArrayLookup");
		out.indent();
		out.println("Array");
		out.indent();
		n.array.accept(this);
		out.outdent();
		out.println("Index");
		out.indent();
		n.index.accept(this);
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(ArrayLength n) {
		out.println("ArrayLength");
		out.indent();
		out.println("Array");
		out.indent();
		n.array.accept(this);
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(Call n) {
		out.println("Call");
		out.indent();
		out.println("Reciever");
		out.indent();
		n.receiver.accept(this);
		out.outdent();
		out.println("MethodName");
		out.indent();
		out.println(n.name);
		out.outdent();
		out.println("Operands");
		out.indent();
		n.rands.accept(this);
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(BooleanLiteral n) {
		out.println("BooleanLiteral");
		out.indent();
		if(n.value)
			out.println("true");
		else
			out.println("false");
		out.outdent();
		return null;
	}

	@Override
	public Void visit(This n) {
		out.println("This");
		return null;
	}

	@Override
	public Void visit(NewArray n) {
		out.println("NewArray");
		out.indent();
		out.println("Size");
		out.indent();
		n.size.accept(this);
		out.outdent();
		out.outdent();
		return null;
	}

	@Override
	public Void visit(NewObject n) {
		out.print("NewObject ");
		out.println(n.typeName);
		return null;
	}

	@Override
	public Void visit(MethodType n) {
		// TODO Auto-generated method stub
		return null;
	}

}
