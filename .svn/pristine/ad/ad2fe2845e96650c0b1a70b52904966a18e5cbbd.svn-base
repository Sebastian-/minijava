package typechecker.implementation;


import java.util.Stack;

import ast.AST;
import ast.Assign;
import ast.BooleanType;
import ast.Conditional;
import ast.ExpressionList;
import ast.FormalList;
import ast.FunctionCall;
import ast.FunctionDeclaration;
import ast.FunctionType;
import ast.IdentifierExp;
import ast.IntegerLiteral;
import ast.IntegerType;
import ast.LessThan;
import ast.Minus;
import ast.NodeList;
import ast.Not;
import ast.ParamDeclaration;
import ast.Plus;
import ast.Print;
import ast.Program;
import ast.Times;
import ast.Type;
import ast.UnknownType;
import typechecker.ErrorReport;
import util.ImpTable;
import util.ImpTable.DuplicateException;
import visitor.DefaultVisitor;

/**
 * This visitor implements Phase 1 of the TypeChecker. It constructs the symbol table.
 * 
 * @author norm
 */
public class BuildSymbolTableVisitor extends DefaultVisitor<ImpTable<Type>> {
	
	private final ImpTable<Type> variables = new ImpTable<Type>();
	private final ErrorReport errors;
	
	// Stack which manages scoping of Bindings
	private Stack<Binding> bindingManager = new Stack<Binding>();
	// Special marker binding denoting a new scope
	private Binding newScope = new Binding("", new UnknownType());
	
	public BuildSymbolTableVisitor(ErrorReport errors) {
		this.errors = errors;
	}

	/////////////////// Phase 1 ///////////////////////////////////////////////////////
	// In our implementation, Phase 1 builds up a single symbol table containing all the
	// identifiers defined in an Expression program. 
	//
	// We also check for duplicate identifier definitions 

	@Override
	public ImpTable<Type> visit(Program n) {
		n.statements.accept(this);
		n.print.accept(this); // process all the "normal" classes.
		return variables;
	}
	
	@Override
	public <T extends AST> ImpTable<Type> visit(NodeList<T> ns) {
		for (int i = 0; i < ns.size(); i++)
			ns.elementAt(i).accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(Assign n) {
		n.value.accept(this);
		def(variables, bindingManager, n.name, new UnknownType());
		return null;
	}
	

	@Override
	public ImpTable<Type> visit(IdentifierExp n) {
		if (variables.lookup(n.name) == null)
			errors.undefinedId(n.name);
		return null;
	}
	
	@Override
	public ImpTable<Type> visit(BooleanType n) {
		return null;
	}

	@Override
	public ImpTable<Type> visit(IntegerType n) {
		return null;
	}

	@Override
	public ImpTable<Type> visit(Print n) {
		n.exp.accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(LessThan n) {
		n.e1.accept(this);
		n.e2.accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(Conditional n) {
		n.e1.accept(this);
		n.e2.accept(this);
		n.e3.accept(this);
		return null;
	}
	
	@Override
	public ImpTable<Type> visit(Plus n) {
		n.e1.accept(this);
		n.e2.accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(Minus n) {
		n.e1.accept(this);
		n.e2.accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(Times n) {
		n.e1.accept(this);
		n.e2.accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(IntegerLiteral n) {
		return null;
	}

	@Override
	public ImpTable<Type> visit(Not not) {
		not.e.accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(UnknownType n) {
		return null;
	}
	
	//////////////////////////Function AST Nodes///////////////////////////////
	
	/*
	 * Current Problem: function names and parameter names occupy the same scope briefly
	 */
	
	@Override
	public ImpTable<Type> visit(FunctionDeclaration n) {
		// generate a new FunctionType symbol table
		FunctionType fun = new FunctionType(n.returnType);
		
		//Start a new scope
		bindingManager.push(newScope);
		variables.clear();
		
		//Add parameter bindings to the stack
		n.fl.accept(this);
		
		// Get parameter bindings in right order and add to the FunctionType symbol table
		Stack<Binding> temp = new Stack<Binding>();
		while(bindingManager.peek() != newScope) {
			Binding b = bindingManager.pop();
			temp.push(b);
		}
		while(!temp.empty()) {
			Binding tempBinding = temp.pop();
			fun.parameteres.add(new ParamDeclaration(tempBinding.type, tempBinding.id));
		}
		
		// Add local assignments to the FunctionType symbol table 
		n.assignments.accept(this);
		while(bindingManager.peek() != newScope) {
			Binding b = bindingManager.pop();
			fun.addLocal(b.id, new UnknownType());
		}
		
		// Ending Function Scope
		variables.clear();
		bindingManager.pop();
		
		// Restore global symbol table
		for(Binding b : bindingManager) {
			if( b == newScope)
				break;
			variables.set(b.id, b.type);
		}
		
		// Add function name to symbol table.
		def(variables, bindingManager, n.functionName, fun);
		return null;
	}

	@Override
	public ImpTable<Type> visit(FormalList n) {
		n.paramList.accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(ParamDeclaration n) {
		def(variables, bindingManager, n.name.name, n.type);
		//bindingManager.push(new Binding(n.name.name, n.type));
		return null;
	}

	@Override
	public ImpTable<Type> visit(ExpressionList n) {
		n.eList.accept(this);
		return null;
	}

	@Override
	public ImpTable<Type> visit(FunctionCall n) {
		return null;
	}


	///////////////////// Helpers ///////////////////////////////////////////////
	
	/**
	 * Add an entry to a table, and check whether the name already existed.
	 * If the name already existed before, the new definition is ignored and
	 * an error is sent to the error report.
	 */
	private <V> void def(ImpTable<V> tab, Stack<Binding> manager, String name, V value) {
		try {
			manager.push(new Binding(name, (Type) value));
			tab.put(name, value);
			if( manager.isEmpty() ) {
				manager.push(newScope);
			}
		} catch (DuplicateException e) {
			errors.duplicateDefinition(name);
			manager.pop();
		}
	}
}