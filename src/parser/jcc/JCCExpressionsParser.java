/* Generated By:JavaCC: Do not edit this line. JCCExpressionsParser.java */
package parser.jcc;

import ast.*;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("all")
public class JCCExpressionsParser implements JCCExpressionsParserConstants {

//**************** DECLARATIONS ***************************************
  final public Program Program() throws ParseException {
  MainClass main;
  NodeList<ClassDecl> otherClasses = new NodeList<ClassDecl>();
  ClassDecl c;
    main = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
          otherClasses.add(c);
    }
    jj_consume_token(0);
    {if (true) return new Program(main, otherClasses);}
    throw new Error("Missing return statement in function");
  }

  final public MainClass MainClass() throws ParseException {
  String className;
  String argName;
  Statement s;
    jj_consume_token(CLASS);
    className = Identifier();
    jj_consume_token(43);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(44);
    jj_consume_token(45);
    argName = Identifier();
    jj_consume_token(RPAREN);
    jj_consume_token(43);
    s = Statement();
    jj_consume_token(46);
    jj_consume_token(46);
    {if (true) return new MainClass(className, argName, s);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl ClassDecl() throws ParseException {
  String name;
  String superName = null;
  VarDecl var;
  MethodDecl method;
  NodeList<VarDecl> vars = new NodeList<VarDecl>();
  NodeList<MethodDecl> methods = new NodeList<MethodDecl>();
    jj_consume_token(CLASS);
    name = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      superName = Identifier();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(43);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case INTEGER_ARRAY:
      case BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      var = FieldVarDecl();
      vars.add(var);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      method = MethodDecl();
      methods.add(method);
    }
    jj_consume_token(46);
    {if (true) return new ClassDecl(name, superName, vars, methods);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl MethodDecl() throws ParseException {
  Type returnType;
  String name;
  VarDecl var;
  Statement s;
  NodeList<VarDecl> formals = new NodeList<VarDecl>();
  NodeList<VarDecl> locals = new NodeList<VarDecl>();
  NodeList<Statement> statements = new NodeList<Statement>();
  Expression returnExp;
    jj_consume_token(PUBLIC);
    returnType = Type();
    name = Identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case INTEGER_ARRAY:
    case BOOLEAN:
    case IDENTIFIER:
      var = FormalVarDecl();
      formals.add(var);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(47);
        var = FormalVarDecl();
        formals.add(var);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(43);
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      var = LocalVarDecl();
      locals.add(var);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case IF:
      case WHILE:
      case IDENTIFIER:
      case 43:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      s = Statement();
      statements.add(s);
    }
    jj_consume_token(RETURN);
    returnExp = Expression();
    jj_consume_token(SEMICOLON);
    jj_consume_token(46);
    {if (true) return new MethodDecl(returnType, name, formals, locals, statements, returnExp);}
    throw new Error("Missing return statement in function");
  }

//**************** VARIABLE DECLARATIONS ******************************
  final public VarDecl FieldVarDecl() throws ParseException {
  Type type;
  String name;
    type = Type();
    name = Identifier();
    jj_consume_token(SEMICOLON);
    {if (true) return new VarDecl(VarDecl.Kind.FIELD, type, name);}
    throw new Error("Missing return statement in function");
  }

  final public VarDecl LocalVarDecl() throws ParseException {
  Type type;
  String name;
    type = Type();
    name = Identifier();
    jj_consume_token(SEMICOLON);
    {if (true) return new VarDecl(VarDecl.Kind.LOCAL, type, name);}
    throw new Error("Missing return statement in function");
  }

  final public VarDecl FormalVarDecl() throws ParseException {
  Type type;
  String name;
    type = Type();
    name = Identifier();
    {if (true) return new VarDecl(VarDecl.Kind.FORMAL, type, name);}
    throw new Error("Missing return statement in function");
  }

//**************** STATEMENTS *****************************************
  final public Statement Statement() throws ParseException {
        Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      s = Block();
      break;
    case IF:
      s = If();
      break;
    case WHILE:
      s = While();
      break;
    case PRINT:
      s = Print();
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_2(2)) {
        s = Assign();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          s = ArrayAssign();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Statement Assign() throws ParseException {
        String name;
        Expression value;
    name = Identifier();
    jj_consume_token(ASSIGN);
    value = Expression();
    jj_consume_token(SEMICOLON);
         {if (true) return new Assign(name, value);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Block() throws ParseException {
  Statement s;
  NodeList<Statement> statements = new NodeList<Statement>();
    jj_consume_token(43);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case IF:
      case WHILE:
      case IDENTIFIER:
      case 43:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      s = Statement();
                  statements.add(s);
    }
    jj_consume_token(46);
    {if (true) return new Block(statements);}
    throw new Error("Missing return statement in function");
  }

  final public Statement If() throws ParseException {
  Expression test;
  Statement then;
  Statement els;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    test = Expression();
    jj_consume_token(RPAREN);
    then = Statement();
    jj_consume_token(ELSE);
    els = Statement();
    {if (true) return new If(test, then, els);}
    throw new Error("Missing return statement in function");
  }

  final public Statement While() throws ParseException {
  Expression test;
  Statement body;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    test = Expression();
    jj_consume_token(RPAREN);
    body = Statement();
    {if (true) return new While(test, body);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Print() throws ParseException {
  Expression e;
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    {if (true) return new Print(e);}
    throw new Error("Missing return statement in function");
  }

  final public Statement ArrayAssign() throws ParseException {
  String name;
  Expression index;
  Expression value;
    name = Identifier();
    jj_consume_token(44);
    index = Expression();
    jj_consume_token(45);
    jj_consume_token(ASSIGN);
    value = Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return new ArrayAssign(name, index, value);}
    throw new Error("Missing return statement in function");
  }

//**************** TYPES **********************************************
  final public Type Type() throws ParseException {
  Token t;
    if (jj_2_3(2)) {
      t = jj_consume_token(INTEGER);
            {if (true) return new IntegerType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
            {if (true) return new BooleanType();}
        break;
      case INTEGER_ARRAY:
        t = jj_consume_token(INTEGER_ARRAY);
            {if (true) return new IntArrayType();}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
            {if (true) return new ObjectType(t.image);}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

//**************** EXPRESSIONS ****************************************
  final public Expression Expression() throws ParseException {
        Expression e, e2;
    e = CompExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      jj_consume_token(48);
      e2 = Expression();
                        e = new And(e, e2);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// For parsing anything with priority same or higher than <
  final public Expression CompExpression() throws ParseException {
        Expression e, e2;
    e = AddExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SMALLER:
      jj_consume_token(SMALLER);
      e2 = AddExpression();
                  e = new LessThan(e, e2);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// For parsing anything with priority same or higher than +
  final public Expression AddExpression() throws ParseException {
        Expression e, e2;
        Token op;
    e = MultExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = MultExpression();
                          if (op.image.equals("+"))
                                e=new Plus(e, e2);
                          else
                                e=new Minus(e, e2);
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// For parsing anything with priority same or higher than *
  final public Expression MultExpression() throws ParseException {
        Expression e, e2;
    e = NotExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      jj_consume_token(MULT);
      e2 = NotExpression();
                          e = new Times(e, e2);
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// For parsing anything with priority same or higher than ! expressions:
  final public Expression NotExpression() throws ParseException {
        Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      e = NotExpression();
                                          {if (true) return new Not(e);}
      break;
    case TRUE:
    case FALSE:
    case NEW:
    case THIS:
    case LPAREN:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      e = PostfixExpression();
                                          {if (true) return e;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// For parsing array lookup/length and method call expressions
  final public Expression PostfixExpression() throws ParseException {
  String id;
  Expression prefix;
  Expression e;
  Expression call;
  NodeList<Expression> eList = new NodeList<Expression>();
    prefix = PrimaryExpression();
                                                                                  call = prefix;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case 44:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        e = Expression();
        jj_consume_token(45);
                                                                                          {if (true) return new ArrayLookup(prefix, e);}
        break;
      default:
        jj_la1[20] = jj_gen;
        if (jj_2_4(2)) {
          jj_consume_token(DOT);
          jj_consume_token(LENGTH);
                                                                                                  {if (true) return new ArrayLength(prefix);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            label_10:
            while (true) {
              jj_consume_token(DOT);
              id = Identifier();
              jj_consume_token(LPAREN);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case TRUE:
              case FALSE:
              case NEW:
              case THIS:
              case LPAREN:
              case NOT:
              case INTEGER_LITERAL:
              case IDENTIFIER:
                e = Expression();
                                          eList.add(e);
                label_11:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 47:
                    ;
                    break;
                  default:
                    jj_la1[17] = jj_gen;
                    break label_11;
                  }
                  jj_consume_token(47);
                  e = Expression();
                                  eList.add(e);
                }
                break;
              default:
                jj_la1[18] = jj_gen;
                ;
              }
              jj_consume_token(RPAREN);
                                                              call = new Call(call, id, eList); eList = new NodeList<Expression>();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DOT:
                ;
                break;
              default:
                jj_la1[19] = jj_gen;
                break label_10;
              }
            }
                                                                                                                  {if (true) return call;}
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    {if (true) return prefix;}
    throw new Error("Missing return statement in function");
  }

/* PrimaryExpression is the expression that has highest precedence.*/
  final public Expression PrimaryExpression() throws ParseException {
        Token t;
        String id;
        Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                                                                  {if (true) return new IntegerLiteral(t.image);}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                                                                                          {if (true) return new BooleanLiteral(true);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                                                                                          {if (true) return new BooleanLiteral(false);}
      break;
    case IDENTIFIER:
      id = Identifier();
                                                                                  {if (true) return new IdentifierExp(id);}
      break;
    case THIS:
      t = jj_consume_token(THIS);
                                                                                          {if (true) return new This();}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      e = Expression();
      jj_consume_token(RPAREN);
                                                                          {if (true) return e;}
      break;
    default:
      jj_la1[23] = jj_gen;
      if (jj_2_5(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INTEGER);
        jj_consume_token(44);
        e = Expression();
        jj_consume_token(45);
                                                          {if (true) return new NewArray(e);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          id = Identifier();
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
                                                                  {if (true) return new NewObject(id);}
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
        Token i;
    i = jj_consume_token(IDENTIFIER);
          {if (true) return i.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(INTEGER_ARRAY)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JCCExpressionsParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x40000,0x700,0x2000,0x0,0x700,0x280080,0x280080,0x0,0x280080,0x600,0x0,0x0,0x0,0x0,0x0,0xbc00000,0x0,0xbc00000,0x0,0x0,0x0,0x0,0xac00000,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100,0x0,0x8000,0x100,0x900,0x800,0x100,0x900,0x100,0x10000,0x8,0x3,0x3,0x4,0x190,0x8000,0x190,0x40,0x1000,0x40,0x1040,0x180,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JCCExpressionsParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JCCExpressionsParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JCCExpressionsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JCCExpressionsParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JCCExpressionsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JCCExpressionsParser(JCCExpressionsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JCCExpressionsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
